{-# LANGUAGE DuplicateRecordFields #-}

module Examples where

import Distributions
import Rejection
import Metropolis
import Sampler

import qualified System.Random.MWC as MWC

import Control.Parallel.Strategies
import Control.Monad

import Data.List

-- call the examples for an external script to graph the results
main :: IO ()
main = do
  model <- getLine
  case model of
    "weibull" -> approxWeibull 1 1.8 >>= print
    "gk" -> abcGK >>= \pars -> print (fst <$> pars) >> print (snd <$> pars)

approxWeibull :: Double -> Double -> IO [Double]
approxWeibull 位 k = let
  kernel = RSMC
    { prior = uniform 0 5
    , priorDensity = const 2
    , targetDensity = \x -> (k / 位) * (x / 位)**(k-1) * exp (-(x / 位)**k)
    }
  in MWC.createSystemRandom >>= sample (rs 10000 kernel)

abcGK :: IO [(Double, Double)]
abcGK = let
  -- y <- gk 0 1 -0.3 0.8
  y :: [Double] = [-0.5104415370506095,-0.7036434632465107,-0.2668368363498056,0.6815278539148982,1.8065750007642016,-1.1482634213252663,-0.10660853352738332,1.2469280832101104,0.7656001636856136,-0.7320043142261864,-4.028497402676845,1.0387799211913844,-1.8660457828367103,-4.0299248430163175,-4.741513290215539,0.6530403315829644,0.24479825013251938,2.6113731175552144,-0.25192550180978834,-5.460086525801049e-2,1.1772787229049015,-5.169184991582197,0.2460051914736727,2.850651742166059,2.803350122147847,-2.5138331249271295,-0.16021357084783153,7.95598130026318e-2,0.1579509935011216,1.2485569713553373,-0.7026650541206256,-6.356494098001902,-1.1067147258067545,-0.3656293496022067,2.5930550010502995,1.4006864549753912,1.3287563023623362e-2,-0.4934879835848968,-0.1152751265700261,4.124238713981147,-0.3274281061664352,17.815877356198563,2.439324175744774,-0.3556365214539682,4.184379956930912,0.5211002573326591,-7.544726539658729,1.1432160816505454,0.10474592715483252,2.2598574690278124,-5.982209564872222e-2,0.3970662237111481,-0.1226321303550215,-2.833925560844585,5.606732231516373,0.4775251542596893,5.521384007685723,-1.3339762548390766,-0.5803242310454019,2.036198920878609,1.011632562481338,-6.607706277661513e-2,3.8510553864065047,-0.11955527847164106,1.6288674013209972,-1.197855950997007,-0.9812973027028926,-3.3243812608680865,-0.9287618414540904,0.6247003134293596,-0.3608071093058975,-1.6574586764389634,0.8422068782827897,1.2963993547489352,3.210441947634901e-2,1.0709150621786345,0.24485693966354982,-1.682055190609811,-1.151283428155862,7.170554007117898e-2,4.8061093617134505,-1.5299907999218874,-2.9428392355646134,0.48157705348963215,2.5763918848022368e-2,0.7333915815410592,-15.221663665916477,-1.202260148652221,-0.2840124914985552,2.3367624660280866,-0.7582762004885446,-4.103347263586696,1.1093339134558795,-1.1724787237984193,0.2366040973823823,-2.1128076576945514,-0.8438843816125938,3.0540896846195116,2.5287449193874108,1.4229384570569787,-1.6480220917225217,-4.134782467746005,0.39280543241777094,0.8511886602772839,2.7602672336570637,0.43392287493375675,-0.4682323987521255,0.7613470128077908,-11.930262800184837,-6.431491814607961,3.0805223447668006,1.9298178856672217,3.2534332707055844,4.065319796389563,-1.7722270288855324,-0.5834553617246786,2.5598942267685425,3.8319128595273138,-1.2609803136050555,-1.5906702843789262,8.158738166147467e-2,-0.7764482576234684,0.6998190710622543,-1.1476144230138676,-1.370813552369474,2.5052687698461074,-0.5323437463478694,0.759077074826166,-0.11759656272783872,-0.24720087400075288,3.72415007937246,1.7881388423706739,1.149159194536326,0.3400441025811831,-0.6689134211264488,0.7618204570110713,-0.7033980200595047,0.2540934346295764,-5.240906405876261,0.41994043930730424,2.2754579486301916,-12.254575244919574,-0.25598032216004896,1.4874270863529166,1.2377717637918372e-3,-0.27220660238528827,0.23363929554286147,-0.574466434237023,-4.759971356174461,0.24492525256681869]
  summarise x = let
    x' = sort x
    n = length x
    mean = (sum x) / (fromIntegral n)
    sd = (sum . map (\x -> (x - mean)**2) $ x) / (fromIntegral n-1)
    in (mean, sd
       , (1/(fromIntegral n * sd**3)) * (sum . map (\x -> (x - mean)**3)) x
       , (1/(fromIntegral n * sd**4)) * (sum . map (\x -> (x - mean)**4)) x)
  kernel = MABC
    { observations = summarise y
    , model = \(g, k) -> summarise <$> replicateM 50 (gk 0 1 g k)
    , prior = \(g, k) -> (if -2 <= g && g <= 0 then 1 else 0) * (if 0 <= k && k <= 2 then 1 else 0)
    , transition = \(g, k) -> (,) <$> gaussian g 2.36 <*> gaussian k 2.36
    , distance = \(x0, x1, x2, x3) (y0, y1, y2, y3) ->
        (x0 - y0)**2 + (x1 - y1)**2 + (x2 - y2)**2 + (x3 - y3)**2
    , tolerance = 1.0
    }
  in do
  gen <- MWC.createSystemRandom
  (g0:g1:g2:g3:g4:g5:_) <- sample (replicateM 6 $ uniform (-2) 0) gen
  (k0:k1:k2:k3:k4:k5:_) <- sample (replicateM 6 $ uniform 0 2) gen
  runEval $ do
    pars0 <- rpar (sample (mh 10000 kernel (g0,k0)) gen)
    pars1 <- rpar (sample (mh 10000 kernel (g1,k1)) gen)
    pars2 <- rpar (sample (mh 10000 kernel (g2,k2)) gen)
    pars3 <- rpar (sample (mh 10000 kernel (g3,k3)) gen)
    pars4 <- rpar (sample (mh 10000 kernel (g4,k4)) gen)
    pars5 <- rpar (sample (mh 10000 kernel (g5,k5)) gen)
    return $ do
      a <- pars0 ; b <- pars1 ; c <- pars2 ; d <- pars3 ; e <- pars4 ; f <- pars5
      return $ a <> b <> c <> d <> e <> f
